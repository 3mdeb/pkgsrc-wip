$NetBSD$

find submodules correctly

install in pkgsrc dirs

--- SSVOpenHexagon-2.0-preview/CMakeLists.txt.orig	2013-07-13 23:37:47.000000000 +0000
+++ SSVOpenHexagon-2.0-preview/CMakeLists.txt
@@ -6,14 +6,7 @@ project(SSVOpenHexagon)
 set(CMAKE_CXX_FLAGS "-std=c++11 -Wall -Wextra -W -pedantic" CACHE STRING "" FORCE)
 set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -O3" CACHE STRING "" FORCE)
 set(CMAKE_CXX_FLAGS_DEBUG "-fno-omit-frame-pointer -g3 -gdwarf-2 -O0" CACHE STRING "" FORCE)
-set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/;${CMAKE_MODULE_PATH}")
-set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/extlibs/SSVJsonCpp/cmake/modules/")
-set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/extlibs/SSVUtils/cmake/modules/")
-set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/extlibs/SSVUtilsJson/cmake/modules/")
-set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/extlibs/SSVMenuSystem/cmake/modules/")
-set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/extlibs/SSVLuaWrapper/cmake/modules/")
-set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/extlibs/SSVEntitySystem/cmake/modules/")
-set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${CMAKE_SOURCE_DIR}/extlibs/SSVStart/cmake/modules/")
+set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/;${MODULE_PATH}")
 
 set(SFML_STATIC_LIBRARIES FALSE CACHE BOOL "Look for static SFML libraries.")
 find_package(SFML 2 COMPONENTS audio graphics window system network)
@@ -65,10 +58,8 @@ target_link_libraries(${PROJECT_NAME} ${
 target_link_libraries(${PROJECT_NAME} ${LUA_LIBRARY})
 
 if(UNIX)
-	install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION /usr/local/games/${PROJECT_NAME}/)
-	install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ${CMAKE_SOURCE_DIR}/_RELEASE/)
-	install(DIRECTORY _RELEASE/ DESTINATION /usr/local/games/SSVOpenHexagon/)
-	install(PROGRAMS _RELEASE/${PROJECT_NAME} DESTINATION /usr/local/games/${PROJECT_NAME}/ PERMISSIONS WORLD_EXECUTE WORLD_READ)
+	install(DIRECTORY _RELEASE/ DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/${PKGBASE}/)
+	install(PROGRAMS ${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/${PKGBASE}/)
 else(WIN32)
 	install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ./_RELEASE/)
 endif()

Debugging to a file:
    log enable -STagnpstv -f /tmp/log.txt lldb all

Debugging GDB remote protocol commands:
    log enable gdb-remote packets

    https://sourceware.org/gdb/onlinedocs/gdb/Remote-Protocol.html

Debugging with gdb(1):
    Start the server:
        gdb --args lldb-server g *:1234 -- ./signal

    Start the client:
        lldb
    Inside it:
        process connect connect://localhost:1234


Introduce objc++ setup with gcc(1) for "make test":
    Build Command Output:
    g++: error trying to exec 'cc1objplus': execvp: No such file or directory
    g++: error trying to exec 'cc1objplus': execvp: No such file or directory
    gmake[4]: *** [main.o] Error 1

Short-term TODO in the current milestone
======================---===============
 - switch the current PT_WATCHPOINT interface to PT_GETDBREGS and PT_SETDBREGS
   and integrate it in NetBSD's userdata in LLDB
 - investigate and address false-positives in "check-lldb"
   "Fix multi-process-driver.cpp build on NetBSD"
   https://reviews.llvm.org/D29403
   committed as SVN 293895
   http://llvm.org/viewvc/llvm-project/?view=rev&revision=293895

To be done later
================
 - auxv reading verified and upstreamed
 - getthreadname / setthreadname verified and upstreamed
 - Host::LaunchProcessPosixSpawn verify ::posix_spawnattr_setsigdefault on NetBSD
 - registers' accessors
 - single step support
 - thread resume/suspend operation
 - i386 support
 - upstream NetBSD support
 - adapt upstream Python tests to run on NetBSD and pass as many of them as
   possible
 - import LLDB into base
 - add NetBSD specific ATF tests verifying fundamental functionality of LLDB

and of course fix as many bugs as possible

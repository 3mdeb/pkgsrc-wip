Debugging to a file:
    log enable -STagnpstv -f /tmp/log.txt lldb all

Debugging with gdb(1):
    Start the server:
        gdb --args lldb-server g *:1234 -- ./signal

    Start the client:
        lldb
    Inside it:
        process connect connect://localhost:1234


Introduce objc++ setup with gcc(1) for "make test":
    Build Command Output:
    g++: error trying to exec 'cc1objplus': execvp: No such file or directory
    g++: error trying to exec 'cc1objplus': execvp: No such file or directory
    gmake[4]: *** [main.o] Error 1

llvm::call_once hack for src:
   curl https://github.com/jsonn/src/commit/78f4ee4c8349d68cf2279f2c7fc2196ae369e182.patch|gpatch -R -p1

The current milestone is to detect in Monitor Callback the following events:
 - process termination - works, appropriate return status passed to LLDB
 - execve(2) - detected but process hangs
 - software breakpoint (TRAP_BRKPT) - detected but process hangs
 - single step - detected but process hangs
 - fork - not detected (hangs earlier?)
 - vfork-done - detected but process hangs
 - lwp creation/termination - detected but process hangs
 - hardware breakpoint - currently not easily testable (skipped)
 - other signal passed to tracee - detected but process hangs

Short-term goals in next milestone:
 - fix conflict with system-wide py-six
 - add support for auxv read operation
 - switch resolution of pid -> path to executable from /proc to sysctl(7)
 - recognize Real-Time Signals (SIGRTMIN-SIGRTMAX)
 - upstream !NetBSDProcessPlugin code
 - switch std::call_once to llvm::call_once

To be done later:
 - registers' accessors
 - single step support
 - thread resume/suspend operation
 - i386 support
 - upstream NetBSD support
 - adapt upstream Python tests to run on NetBSD and pass as many of them as
   possible
 - import LLDB into base
 - add NetBSD specific ATF tests verifying fundamental functionality of LLDB

and of course fix as many bugs as possible
